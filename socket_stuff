

htonl, htons, ntohl, ntohs
connect, bind, listen, accept
send, recv
shudown

// GET "file desc."
int socket(int domain, int type, int protocol)
    arg1: AF_INET, AF_INET6, AF_UNIX, AF_UNSPECT
    arg2:
        SOCK_DGRAM: UDP,
        SOCK_RAW: do stuff yourself (haxor stuff),
        SOCK_SEQPACKET: TCP
        SOCK_SREAM


// we can use close() instead.
// close it
int shutdown (int sockfd, int how)
    arg1: filedesc.
    arg2:
        SHUT_RD readconnection closed,
        SHUT_WR: write connection closed,
        SHUT_RDWR "everything" (read and write) shutdown

// Diffrent adress formats in binery
    sockaddr,
    sockaddr_in version 4,
    sockaddr_in6 version 6
getnameinfo: http://man7.org/linux/man-pages/man3/getnameinfo.3.html

// Adress lookup
    getaddrinfo(host, service, hint, result)
    arg1: EX ,
    arg2: ex HTTP,
    arg3: can be used to limit the results like remove ipv4,
    arg4: linkedlist with connections


// ----
// client
// ----
// to connect to server
connect(int sockfd, cont strct socketaddr * addr, socketlen_t len)

// ----
// server
// ----
// bind socket to a adress
bind (int soockfd, cont stuct socketaddr *addr, socketlen_t len)

// start listening the socketfd,
listen(int sockfd, int backlog)
    arg1: socket file desc.
    arg2: how many connections can it take? How many connections to que the

// accept the the specifec addr given
// gives the fd for the new connection
int accept(int socketfd, struct sockaddr *restrict addr, socketlen_t *rescrit len)
arg1: should bound to port 80,
arg2: addres info about the client whom is connected with the server, can be set to null if not interesting

// now when we have the FD we can just use I/O stuff on it basiclly
// same as write() for file. btw, write can be used here too if we dont want flag
send(int socketfd, cont void *buff, size_t nbytes, int flags)
    arg3: ex MSG_DOTROUTE, MSG_DONTWAINT, MSG_OOB, etc

there are also sendTo can be used with UDP


// to receive from some connection. same as read() but the diffrent is as before the flag
ssize_t recv(int socketfd, void *buf, size_t nbytes, int flags)
    arg3: ex MSG_OOB, MSG_PEEK, MSG_TRUNC, MSG_WAITALL
